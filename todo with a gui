import tkinter as tk
from tkinter import messagebox, ttk

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")

        # Custom styling
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        self.root.configure(bg="#f0f0f0")

        # Fonts
        self.title_font = ("Helvetica", 18, "bold")
        self.button_font = ("Helvetica", 10)
        self.list_font = ("Helvetica", 12)

        # Task list
        self.tasks = []

        # Create UI elements
        self.create_widgets()

    def create_widgets(self):
        # Main frame
        main_frame = tk.Frame(self.root, bg="#f0f0f0")
        main_frame.pack(pady=20)

        # Title
        title_label = tk.Label(
            main_frame,
            text="My To-Do List",
            font=self.title_font,
            bg="#f0f0f0",
            fg="#333333"
        )
        title_label.pack(pady=(0, 20))

        # Input frame
        input_frame = tk.Frame(main_frame, bg="#f0f0f0")
        input_frame.pack(pady=(0, 15))

        self.task_entry = tk.Entry(
            input_frame,
            width=40,
            font=self.list_font,
            relief="flat",
            bg="white",
            fg="#333333",
            insertbackground="#333333"
        )
        self.task_entry.grid(row=0, column=0, padx=(0, 5))
        self.task_entry.bind("<Return>", lambda event: self.add_task())

        add_button = tk.Button(
            input_frame,
            text="Add Task",
            command=self.add_task,
            font=self.button_font,
            bg="#4CAF50",
            fg="white",
            activebackground="#45a049",
            activeforeground="white",
            relief="flat",
            padx=10
        )
        add_button.grid(row=0, column=1)

        # Task list frame
        list_frame = tk.Frame(main_frame, bg="#f0f0f0")
        list_frame.pack()

        # Treeview for tasks
        self.task_list = ttk.Treeview(
            list_frame,
            columns=("Tasks"),
            show="headings",
            height=10,
            selectmode="browse"
        )
        
        # Style the Treeview
        style = ttk.Style()
        style.configure(
            "Treeview",
            background="#ffffff",
            fieldbackground="#ffffff",
            foreground="#333333",
            font=self.list_font,
            rowheight=25
        )
        style.configure(
            "Treeview.Heading",
            background="#f5f5f5",
            relief="flat",
            font=("Helvetica", 12, "bold")
        )
        
        self.task_list.heading("Tasks", text="Tasks")
        self.task_list.column("Tasks", width=400)
        self.task_list.pack()

        # Button frame
        button_frame = tk.Frame(main_frame, bg="#f0f0f0")
        button_frame.pack(pady=(15, 0))

        delete_button = tk.Button(
            button_frame,
            text="Delete Selected",
            command=self.delete_task,
            font=self.button_font,
            bg="#f44336",
            fg="white",
            activebackground="#d32f2f",
            activeforeground="white",
            relief="flat",
            padx=10
        )
        delete_button.grid(row=0, column=0, padx=(0, 10))

        clear_button = tk.Button(
            button_frame,
            text="Clear All",
            command=self.clear_tasks,
            font=self.button_font,
            bg="#607D8B",
            fg="white",
            activebackground="#455A64",
            activeforeground="white",
            relief="flat",
            padx=10
        )
        clear_button.grid(row=0, column=1)

    def add_task(self):
        task = self.task_entry.get().strip()
        if task:
            self.tasks.append(task)
            self.task_list.insert("", "end", values=(task,))
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Please enter a task.")

    def delete_task(self):
        selected_item = self.task_list.selection()
        if selected_item:
            task = self.task_list.item(selected_item)['values'][0]
            if task in self.tasks:
                self.tasks.remove(task)
            self.task_list.delete(selected_item)
        else:
            messagebox.showwarning("Warning", "Please select a task to delete.")

    def clear_tasks(self):
        if self.tasks:
            confirmed = messagebox.askyesno(
                "Confirm",
                "Are you sure you want to delete all tasks?"
            )
            if confirmed:
                self.tasks.clear()
                for item in self.task_list.get_children():
                    self.task_list.delete(item)
        else:
            messagebox.showinfo("Info", "Your to-do list is already empty.")

def main():
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
